{"version":3,"sources":["components/Search/index.module.css","features/search/slice.ts","redux/store.tsx","utils/index.ts","redux/selectors/search/index.ts","redux/methods/search/index.ts","githubAPI/index.ts","components/OptionIconGenerator/index.tsx","components/Search/index.tsx","features/search/SearchForm/index.tsx","features/FeatureWrapper/index.tsx"],"names":["module","exports","initialState","result","users","repos","isLoading","error","createSlice","name","reducers","setResultByTarget","state","action","payload","target","setIsLoading","setErrorByTarget","actions","search","searchInitialState","rootReducer","combineReducers","searchReducer","store","configureStore","reducer","devTools","process","preloadedState","middleware","thunk","processError","status","console","selectTranslatedAndSortedSearchResult","createSelector","resultUsers","resultRepos","translatedUsers","Array","isArray","map","resultItem","origin","url","html_url","login","translatedRepos","translateReposResult","sortBy","item","toLowerCase","slice","selectError","errorUsers","errorRepos","gAPI","octokit","Octokit","baseUrl","getUsersByQuery","query","a","limit","q","per_page","response","data","getReposByQuery","githubAPI","getActionToDispatchForSingleRequest","searchPhrase","type","methodToUse","items","OptionIconGenerator","Storage","Person","Search","combinedResults","getSearchResults","clearSearchResults","clearError","useState","value","setValue","inputValue","setInputValue","filters","setFilters","delayedQuery","useCallback","debounce","handleClearError","handleOnCheckboxChange","updatedFilters","includes","filter","filterType","generateUpdatedFilters","useEffect","window","open","className","styles","container","Typography","variant","component","filtersControls","FormControlLabel","label","control","Checkbox","checked","onChange","color","input","Autocomplete","event","newValue","reason","onInputChange","newInputValue","length","options","getOptionLabel","getOptionSelected","clearOnBlur","loading","loadingText","disabled","renderInput","props","TextField","renderOption","option","Snackbar","onClose","Alert","elevation","severity","mapDispatch","activeFilters","dispatch","connect","FeatureWrapper"],"mappings":"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","file":"static/js/main.a50fe90f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Search_container__1vJAR\",\"option\":\"Search_option__2X2jn\",\"filters\":\"Search_filters__F1GTs\"};","import { SliceState, ResultAction, IsLoadingAction } from '../../types';\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialState: SliceState = {\r\n    result: {\r\n        users: [],\r\n        repos: []\r\n    },\r\n    isLoading: false,\r\n    error: {\r\n        users: null,\r\n        repos: null\r\n    }\r\n};\r\n\r\nconst users = createSlice({\r\n    name: 'search',\r\n    initialState,\r\n    reducers: {\r\n        setResultByTarget(state, action) {\r\n            const { target, result }: ResultAction = action.payload;\r\n\r\n            state.result[target] = result;\r\n        },\r\n        setIsLoading(state, action) {\r\n            const { isLoading }: IsLoadingAction = action.payload;\r\n\r\n            state.isLoading = isLoading;\r\n        },\r\n        setErrorByTarget(state, action) {\r\n            const { target, error } = action.payload;\r\n\r\n            state.error[target] = error;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setResultByTarget, setIsLoading, setErrorByTarget } = users.actions;\r\n\r\nexport default users.reducer;","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport thunk from 'redux-thunk';\r\n\r\nimport searchReducer, { initialState as searchInitialState } from '../features/search/slice';\r\n\r\nconst initialState = {\r\n    search: searchInitialState\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    search: searchReducer\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    preloadedState: initialState,\r\n    middleware: [thunk]\r\n});","import { SearchUsersResponseData, SearchReposResponseData } from '@octokit/types';\r\nimport { SearchResultItem } from '../types/propTypes';\r\n\r\nexport const processResponseStatus = (status: number): string | null =>\r\n    status !== 200 ? `request to GithubAPI returned with ${status} http error` : null\r\n;\r\n\r\nexport const processError = (error: any) => {\r\n    if (error.status === 403) {\r\n        return 'Too many requests, please wait before continuing search';\r\n    } else {\r\n        console.error(error);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const translateUsersResult = (result: SearchUsersResponseData['items']): Array<SearchResultItem> =>\r\n    result && Array.isArray(result) ? result.map(resultItem => ({\r\n        origin: 'user',\r\n        url: resultItem.html_url,\r\n        name: resultItem.login\r\n    })) : []\r\n;\r\n\r\nexport const translateReposResult = (result: SearchReposResponseData['items']):Array<SearchResultItem> =>\r\n    result && Array.isArray(result) ? result.map(resultItem => ({\r\n        origin: 'repo',\r\n        url: resultItem.html_url,\r\n        name: resultItem.name\r\n    })) : []\r\n;\r\n\r\nexport const generateUpdatedFilters = (filters: Array<string>, type: 'users' | 'repos'): Array<string> =>\r\n    filters && Array.isArray(filters)\r\n        ? filters.includes(type)\r\n            ? filters.filter(filterType => filterType !== type)\r\n            : [ ...filters, type ]\r\n        : []\r\n;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport { sortBy } from 'lodash';\r\n\r\nimport { translateUsersResult, translateReposResult } from '../../../utils';\r\n\r\nconst selectResultUsers = (state: any) => state.search.result.users;\r\nconst selectResultRepos = (state: any) => state.search.result.repos;\r\nconst selectIsLoading = (state: any) => state.search.isLoading;\r\nconst selectErrorUsers = (state: any) => state.search.error.users;\r\nconst selectErrorRepos = (state: any) => state.search.error.repos;\r\n\r\nexport const selectTranslatedAndSortedSearchResult = createSelector(\r\n    selectResultUsers,\r\n    selectResultRepos,\r\n    selectIsLoading,\r\n    (resultUsers, resultRepos, isLoading) => {\r\n        const translatedUsers = translateUsersResult(resultUsers);\r\n        const translatedRepos = translateReposResult(resultRepos);\r\n\r\n        return !isLoading ? sortBy([ ...translatedUsers, ...translatedRepos ], item => item.name.toLowerCase()).slice(0, 50) : [];\r\n    }\r\n);\r\n\r\nexport const selectError = createSelector(\r\n    selectErrorUsers,\r\n    selectErrorRepos,\r\n    (errorUsers, errorRepos) => errorUsers || errorRepos\r\n);","import { Dispatch } from '@reduxjs/toolkit';\r\n\r\nimport { githubAPI } from '../../../githubAPI';\r\n\r\nimport { setResultByTarget, setIsLoading, setErrorByTarget } from '../../../features/search/slice';\r\n\r\nconst gAPI = githubAPI();\r\n\r\nconst getActionToDispatchForSingleRequest = async (searchPhrase: string, type: 'users' | 'repos') => {\r\n    const methodToUse = type === 'users' ? gAPI.getUsersByQuery : gAPI.getReposByQuery;\r\n    const { payload, error } = await methodToUse(searchPhrase);\r\n        \r\n    if (payload) {\r\n        return setResultByTarget({\r\n            target: type,\r\n            result: payload.items\r\n        });\r\n    } else {\r\n        return setErrorByTarget({\r\n            target: type,\r\n            error: error\r\n        });\r\n    }\r\n}\r\n\r\nexport const getSearchResults = (searchPhrase: string, activeFilters: Array<string>) => async (dispatch: Dispatch) => {\r\n    dispatch(setIsLoading({ isLoading: true }));\r\n\r\n    if (activeFilters.includes('users')) {\r\n        dispatch(await getActionToDispatchForSingleRequest(searchPhrase, 'users'));\r\n    }\r\n\r\n    if (activeFilters.includes('repos')) {\r\n        dispatch(await getActionToDispatchForSingleRequest(searchPhrase, 'repos'));\r\n    }\r\n\r\n    dispatch(setIsLoading({ isLoading: false }));\r\n};\r\n\r\nexport const clearSearchResults = () => (dispatch: Dispatch) => {\r\n    dispatch(setResultByTarget({\r\n        target: 'users',\r\n        result: []\r\n    }));\r\n    dispatch(setResultByTarget({\r\n        target: 'repos',\r\n        result: []\r\n    }));\r\n};\r\n\r\nexport const clearError = () => (dispatch: Dispatch) => {\r\n    dispatch(setErrorByTarget({\r\n        target: 'users',\r\n        error: null\r\n    }));\r\n    dispatch(setErrorByTarget({\r\n        target: 'repos',\r\n        error: null\r\n    }));\r\n}","import { Octokit } from '@octokit/rest';\r\n\r\nimport { processError } from '../utils';\r\n\r\nexport const githubAPI = () => {\r\n    const octokit = new Octokit({\r\n        baseUrl: 'https://api.github.com'\r\n    });\r\n\r\n    const getUsersByQuery = async (query: string, limit: number = 50) => {\r\n        try {\r\n            const response = await octokit.search.users({\r\n                q: `${query}+in:login`,\r\n                per_page: limit\r\n            });\r\n            const { data } = response;\r\n    \r\n            return { payload: data, error: null };\r\n        } catch (error) {\r\n            return { payload: null, error: processError(error) };\r\n        }\r\n    };\r\n\r\n    const getReposByQuery = async (query: string, limit: number = 50) => {\r\n        try {\r\n            const response = await octokit.search.repos({\r\n                q: `${query}+in:name`,\r\n                per_page: limit\r\n            });\r\n            const { data } = response;\r\n    \r\n            return { payload: data, error: null };\r\n        } catch (error) {\r\n            return { payload: null, error: processError(error) };\r\n        }\r\n    };\r\n\r\n    return {\r\n        getUsersByQuery,\r\n        getReposByQuery\r\n    };\r\n};","import React from 'react';\r\n\r\nimport { Storage, Person } from '@material-ui/icons';\r\n\r\nimport { OptionIconGeneratorProps as Props } from '../../types/propTypes';\r\n\r\nconst OptionIconGenerator = ({ origin }: Props) => {\r\n    switch (origin) {\r\n        case 'repo': return <Storage />;\r\n        case 'user': return <Person />;\r\n        default: return null;\r\n    };\r\n};\r\n\r\nexport default OptionIconGenerator;","import React, { useState, useEffect, useCallback, SyntheticEvent } from 'react';\r\n\r\nimport { debounce } from 'lodash';\r\n\r\nimport { generateUpdatedFilters } from '../../utils';\r\n\r\nimport { TextField, FormControlLabel, Checkbox, Typography, Snackbar } from '@material-ui/core';\r\nimport { Autocomplete, Alert } from '@material-ui/lab';\r\nimport OptionIconGenerator from '../OptionIconGenerator';\r\n\r\nimport { SearchProps as Props, SearchResultItem } from '../../types/propTypes';\r\n\r\nimport styles from './index.module.css';\r\n\r\nconst Search = ({ combinedResults, getSearchResults, clearSearchResults, isLoading, error, clearError }: Props) => {\r\n    const [ value, setValue ] = useState<SearchResultItem | null>(null);\r\n    const [ inputValue, setInputValue ] = useState<string>('');\r\n    const [ filters, setFilters] = useState<Array<string>>(['users', 'repos']);\r\n    const delayedQuery = useCallback(debounce((inputValue: string, filters: Array<string>) => getSearchResults(inputValue, filters), 500), []);\r\n\r\n    const handleClearError = () => {\r\n        clearError();\r\n    };\r\n\r\n    const handleOnChangeValue = (event: SyntheticEvent<EventTarget>, newValue: any, reason: string) => {\r\n        setValue(newValue);\r\n        if (reason === 'clear') {\r\n            clearSearchResults();\r\n        }\r\n    };\r\n\r\n    const handleOnChangeInputValue = (event: SyntheticEvent<EventTarget>, newInputValue: string) => {\r\n        if (error) {\r\n            clearError();\r\n        }\r\n        setInputValue(newInputValue);\r\n\r\n        const canMakeCall = newInputValue && newInputValue.length >= 3 && filters && filters.length > 0;\r\n        if (canMakeCall) {\r\n            delayedQuery(newInputValue, filters);\r\n        }\r\n    };\r\n\r\n    const handleOnCheckboxChange = (type: 'users' | 'repos') => () => {\r\n        const updatedFilters = generateUpdatedFilters(filters, type);\r\n        \r\n        setInputValue('');\r\n        clearSearchResults();\r\n        setFilters(updatedFilters);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            window.open(value.url, \"_blank\");\r\n        }\r\n    }, [ value ]);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <aside className={styles.filters}>\r\n                <Typography variant=\"body1\" component=\"span\">Search within:</Typography>\r\n                <span className={styles.filtersControls}>\r\n                    <FormControlLabel\r\n                        label=\"Users\"\r\n                        control={\r\n                            <Checkbox\r\n                                checked={filters.includes('users')}\r\n                                onChange={handleOnCheckboxChange('users')}\r\n                                name=\"Users\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                    />\r\n                    <FormControlLabel\r\n                        label=\"Repos\"\r\n                        control={\r\n                            <Checkbox\r\n                                checked={filters.includes('repos')}\r\n                                onChange={handleOnCheckboxChange('repos')}\r\n                                name=\"Repos\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                    />\r\n                </span>\r\n            </aside>\r\n            <main className={styles.input}>\r\n                <Autocomplete\r\n                    value={value}\r\n                    onChange={handleOnChangeValue}\r\n                    inputValue={inputValue}\r\n                    onInputChange={handleOnChangeInputValue}\r\n                    options={combinedResults}\r\n                    getOptionLabel={item => item.name}\r\n                    getOptionSelected={item => item.url === (value && value.url)}\r\n                    clearOnBlur={false}\r\n                    loading={isLoading ? true : false}\r\n                    loadingText=\"Fetching data...\"\r\n                    disabled={filters.length === 0}\r\n                    renderInput={\r\n                        props =>\r\n                            <TextField\r\n                                {...props}\r\n                                error={error ? true : false}\r\n                                label=\"Search GitHub\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                    }\r\n                    renderOption={\r\n                        option =>\r\n                            <span className={styles.option}>\r\n                                <span>{option.name}</span>\r\n                                <OptionIconGenerator origin={option.origin}/>\r\n                            </span>\r\n                    }\r\n                />\r\n            </main>\r\n            <Snackbar open={error ? true : false} onClose={handleClearError}>\r\n                <Alert\r\n                    elevation={6}\r\n                    variant=\"filled\"\r\n                    onClose={handleClearError}\r\n                    severity=\"error\"\r\n                >\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { selectTranslatedAndSortedSearchResult, selectError } from '../../../redux/selectors/search';\r\nimport { getSearchResults, clearSearchResults, clearError } from '../../../redux/methods/search';\r\n\r\nimport Search from '../../../components/Search';\r\n\r\nimport { SearchProps as Props } from '../../../types/propTypes';\r\n\r\nconst SearchForm = (props: Props) => <Search {...props}/>;\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    combinedResults: selectTranslatedAndSortedSearchResult(state),\r\n    isLoading: state.search.isLoading,\r\n    error: selectError(state)\r\n});\r\n\r\nconst mapDispatch = {\r\n    getSearchResults,\r\n    clearSearchResults,\r\n    clearError\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(SearchForm);","import React from 'react';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '../../redux/store';\r\n\r\nimport SearchForm from '../search/SearchForm';\r\n\r\nimport 'fontsource-roboto';\r\n\r\nconst FeatureWrapper = () =>\r\n    <Provider store={store}>\r\n        <SearchForm />\r\n    </Provider>\r\n;\r\n\r\nexport default FeatureWrapper;"],"sourceRoot":""}