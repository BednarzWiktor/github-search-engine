// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search renders without crashing 1`] = `
<div
  className="container"
>
  <aside
    className="filters"
  >
    <WithStyles(ForwardRef(Typography))
      component="span"
      variant="body1"
    >
      Search within:
    </WithStyles(ForwardRef(Typography))>
    <span
      className="filtersControls"
    >
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Users"
            onChange={[Function]}
          />
        }
        label="Users"
      />
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Repos"
            onChange={[Function]}
          />
        }
        label="Repos"
      />
    </span>
  </aside>
  <main
    className="input"
  >
    <WithStyles(ForwardRef(Autocomplete))
      clearOnBlur={false}
      disabled={false}
      getOptionLabel={[Function]}
      getOptionSelected={[Function]}
      inputValue=""
      loading={false}
      loadingText="Fetching data..."
      onChange={[Function]}
      onInputChange={[Function]}
      options={
        Array [
          Object {
            "name": "user1",
            "origin": "user",
            "url": "http://user1.com",
          },
          Object {
            "name": "repo1",
            "origin": "user",
            "url": "http://repo1.com",
          },
          Object {
            "name": "user2",
            "origin": "user",
            "url": "http://user2.com",
          },
          Object {
            "name": "repo2",
            "origin": "user",
            "url": "http://repo2.com",
          },
        ]
      }
      renderInput={[Function]}
      renderOption={[Function]}
      value={null}
    />
  </main>
  <WithStyles(ForwardRef(Snackbar))
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(Alert))
      elevation={6}
      onClose={[Function]}
      severity="error"
      variant="filled"
    />
  </WithStyles(ForwardRef(Snackbar))>
</div>
`;

exports[`Search renders without crashing 2`] = `
<div
  className="container"
>
  <aside
    className="filters"
  >
    <WithStyles(ForwardRef(Typography))
      component="span"
      variant="body1"
    >
      Search within:
    </WithStyles(ForwardRef(Typography))>
    <span
      className="filtersControls"
    >
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Users"
            onChange={[Function]}
          />
        }
        label="Users"
      />
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Repos"
            onChange={[Function]}
          />
        }
        label="Repos"
      />
    </span>
  </aside>
  <main
    className="input"
  >
    <WithStyles(ForwardRef(Autocomplete))
      clearOnBlur={false}
      disabled={false}
      getOptionLabel={[Function]}
      getOptionSelected={[Function]}
      inputValue=""
      loading={true}
      loadingText="Fetching data..."
      onChange={[Function]}
      onInputChange={[Function]}
      options={
        Array [
          Object {
            "name": "user1",
            "origin": "user",
            "url": "http://user1.com",
          },
          Object {
            "name": "repo1",
            "origin": "user",
            "url": "http://repo1.com",
          },
          Object {
            "name": "user2",
            "origin": "user",
            "url": "http://user2.com",
          },
          Object {
            "name": "repo2",
            "origin": "user",
            "url": "http://repo2.com",
          },
        ]
      }
      renderInput={[Function]}
      renderOption={[Function]}
      value={null}
    />
  </main>
  <WithStyles(ForwardRef(Snackbar))
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(Alert))
      elevation={6}
      onClose={[Function]}
      severity="error"
      variant="filled"
    />
  </WithStyles(ForwardRef(Snackbar))>
</div>
`;

exports[`Search renders without crashing 3`] = `
<div
  className="container"
>
  <aside
    className="filters"
  >
    <WithStyles(ForwardRef(Typography))
      component="span"
      variant="body1"
    >
      Search within:
    </WithStyles(ForwardRef(Typography))>
    <span
      className="filtersControls"
    >
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Users"
            onChange={[Function]}
          />
        }
        label="Users"
      />
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Repos"
            onChange={[Function]}
          />
        }
        label="Repos"
      />
    </span>
  </aside>
  <main
    className="input"
  >
    <WithStyles(ForwardRef(Autocomplete))
      clearOnBlur={false}
      disabled={false}
      getOptionLabel={[Function]}
      getOptionSelected={[Function]}
      inputValue=""
      loading={false}
      loadingText="Fetching data..."
      onChange={[Function]}
      onInputChange={[Function]}
      options={Array []}
      renderInput={[Function]}
      renderOption={[Function]}
      value={null}
    />
  </main>
  <WithStyles(ForwardRef(Snackbar))
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(Alert))
      elevation={6}
      onClose={[Function]}
      severity="error"
      variant="filled"
    />
  </WithStyles(ForwardRef(Snackbar))>
</div>
`;

exports[`Search renders without crashing 4`] = `
<div
  className="container"
>
  <aside
    className="filters"
  >
    <WithStyles(ForwardRef(Typography))
      component="span"
      variant="body1"
    >
      Search within:
    </WithStyles(ForwardRef(Typography))>
    <span
      className="filtersControls"
    >
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Users"
            onChange={[Function]}
          />
        }
        label="Users"
      />
      <WithStyles(ForwardRef(FormControlLabel))
        control={
          <ForwardRef(WithStyles)
            checked={true}
            color="primary"
            name="Repos"
            onChange={[Function]}
          />
        }
        label="Repos"
      />
    </span>
  </aside>
  <main
    className="input"
  >
    <WithStyles(ForwardRef(Autocomplete))
      clearOnBlur={false}
      disabled={false}
      getOptionLabel={[Function]}
      getOptionSelected={[Function]}
      inputValue=""
      loading={true}
      loadingText="Fetching data..."
      onChange={[Function]}
      onInputChange={[Function]}
      options={Array []}
      renderInput={[Function]}
      renderOption={[Function]}
      value={null}
    />
  </main>
  <WithStyles(ForwardRef(Snackbar))
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(Alert))
      elevation={6}
      onClose={[Function]}
      severity="error"
      variant="filled"
    />
  </WithStyles(ForwardRef(Snackbar))>
</div>
`;
